WebDriverIO built on Node.js engine and Uses JS to automate
Uses Selenium under hood
All the benefits of Selenium is there

Stable version - WebDriverIO 7 & 6
node js - 14 or 15 version

npm - node package manager for js programming language
similar to maven repo as for java, npmjs packages

>>project set up
##first go to project path - cd
##npm init -y - initialize a new project with default
##install webdriverio cli dependency ->  npm install --save-dev @wdio/cli
>>configuration file store webdriverIO settings, testcases browser timeout
##create + run - configuration file -->   npx wdio config -y
## npx - will search for wdio/cli in the node modules
##thn do  "@wdio/sync": "7.6.1" in the package.json and npm install
##for autocomplete add jsconfig.json file , refresh, close and come back to vs
##run the testcases --> npx wdio run wdio.conf.js



use node file.js to run invidual js files
//specs: has the testcases
//npm install to install everything locally
webdriverIO default testing framework mocha, it supports jasmine,cucumber as well
spec file - test cases
describe - test suit
 inside describe it block has test case ( can have n number of it block)
 spec file can have multiple describe(test suit)


//mocha framework has a library called chai which supports assertions for string , number comparing
//chai - general assertion library, Chai is a BDD / TDD assertion library for node and the browser 
        that can be delightfully paired with any javascript testing framework.
install - npm install --save-dev chai

import it in testcase - const expectchai = require('chai').expect


for debugging install plugin - JavaScript Debugger (Nightly)
ms-vscode.js-debug-nightly
 




//USE SELENIUM STANDALONE SERVICE FOR CHROME AND FIREFOX PARALLAL EXECUTION
-- npm install @wdio/selenium-standalone-service --save-dev


// Set a base URL in order to shorten url command calls in wdio.conf.js
baseUrl: "https://www.rahulshettyacademy.com"

in testcase -> browser.url("/AutomationPractice/")


//run specific test
npx wdio run wdio.conf.js --mochaOpts.grep Smoke


##run specific spec files using suites-

before specs array add this-
suites:{
        debitCard:['relative path', 'relative path'],
        creditCard: ['relative path']
},

command - npx wdio run wdio.conf.js --suite debitCard


#run specific spec file from cli-
npx wdio run wdio.conf.js --spec relative_path_to_the_file


#exclude spec file using relative path in exclude property in wdio.conf.js

# with npx wdio run wdio.conf.js will trigger only smoke ---->

 mochaOpts: {
    ui: "bdd",
    timeout: 60000,
    grep: "Smoke",
  },

  //only trigger smoke test


  //tests are flaky which are inconsistent-->
  they start passing rerun

 this.retries(2) , cant be used with arrow function

 ## run flakey test - this.retries(2), dnt use with arrow function


 ## wrap commands in scripts like this for end users-
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "LoginTest": "npx wdio run wdio.conf.js --suite Login" -- this one , run using ---> npm run LoginTest
  },

"scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "LoginTest": "npx wdio run wdio.conf.js --suite Login",
    "RegressionTest": "npx wdio run wdio.conf.js",
    "UATRegression": "npx wdio run wdio.uat.conf.js"
  },

  run using - npm run LoginTest


  ## for allure reporting --
1.npm install @wdio/allure-reporter --save-dev
2. add this in wdio.conf.js after mochaOpts -
reporters: [['allure', {
        outputDir: 'allure-results',
        disableWebdriverStepsReporting: true,
        disableWebdriverScreenshotsReporting: true,
    }]],
3.//do this for failing tcs screenshot aftertest hook
  afterTest: function(test, context, { error, result, duration, passed, retries }) {
  
    if (error) {
      browser.takeScreenshot();
    }
  },

4. install allure command line tool---
npm install -g allure-commandline --save-dev
Displaying the report#
---- allure generate [allure_output_dir] && allure open
allure generate allure-results && allure open
allure generate allure-results --clean && allure open
wrap this in scripts in package.json for users